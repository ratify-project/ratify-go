/*
Copyright The Ratify Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package ratify

import (
	"context"

	ocispec "github.com/opencontainers/image-spec/specs-go/v1"
)

// PrunedState is the state how an artifact is pruned from the evaluation graph.
type PrunedState int

const (
	// PrunedStateNone is the state when the artifact is not pruned from the
	// evaluation graph.
	PrunedStateNone PrunedState = iota
	// PrunedStateVerifierPruned is the state when the verifier is not required
	// to verify the subject against the artifact to make a decision.
	PrunedStateVerifierPruned
	// PrunedStateSubjectPruned is the state when the subject is not required to
	// be verified to make a decision.
	PrunedStateSubjectPruned
)

// ValidationReport describes the results of verifying an artifact and its
// nested artifacts by available verifiers.
type ValidationReport struct {
	// Subject is the subject reference of the artifact being verified.
	// Required.
	Subject string

	// Results are generated by verifiers while verifying the subject against
	// the referrer artifact. Required.
	// e.g. If the Subject is a container image, Artifact is a descriptor to
	// Notation signature. Results are generated by Notation verifiers verifying
	// the image against the signature.
	Results []*VerificationResult

	// Artifact is the descriptor of the referrer artifact being verified
	// against with. Required.
	Artifact ocispec.Descriptor

	// ArtifactReports is reports of verifying referrer artifacts. Optional.
	// e.g. If the Subject is a container image, Artifact is a descriptor to
	// SBOM which is signed by a Notation signature. ArtifactReports are
	// generated by the executor verifying the SBOM against the signature.
	ArtifactReports []*ValidationReport
}

// Evaluator is an interface that defines methods to aggregate and evaluate
// verification results generated for an artifact per validation request.
type Evaluator interface {
	// Pruned determines whether verification for a given subject-artifact pair
	// should be skipped.
	// It returns [PrunedStateVerifierPruned] if the verifier is not required to
	// verify the subject against the artifact.
	// It returns [PrunedStateArtifactPruned] if the artifact is not required to
	// be verified against.
	// It returns [PrunedStateSubjectPruned] if the subject is not required to
	// be verified.
	// It returns [PrunedStateNone] if the verifier is required to verify the
	// subject against the artifact.
	Pruned(ctx context.Context, subjectDigest, artifactDigest, verifierName string) (PrunedState, error)

	// AddResult adds the verification result of the subject against the
	// artifact to the evaluator for further evaluation.
	AddResult(ctx context.Context, subjectDigest, artifactDigest string, artifactResult *VerificationResult) error

	// Commit commits the verification results of the subject. No more results
	// will be added for the subject after this call.
	Commit(ctx context.Context, subjectDigest string) error

	// Evaluate makes the final decision based on aggregated verification
	// results added so far.
	Evaluate(ctx context.Context) (bool, error)
}

// PolicyEnforcer is an interface that generates an evaluator upon a validation
// request.
type PolicyEnforcer interface {
	// Evaluator returns an [Evaluator] for the given subject digest.
	Evaluator(ctx context.Context, subjectDigest string) (Evaluator, error)
}
